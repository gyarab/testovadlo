#!/usr/bin/python

import re
import os
import json

import numpy as np
import matplotlib
matplotlib.use('agg')
import matplotlib.pyplot as plt


fn_re = re.compile(r"^arg(\d+)\.json$")
val_weight_re = re.compile(r"^(.*?)\s*\(x(\d+)\)\s*$")
val_default_re = re.compile(r"^(.*?)\s*\(=(\d+)\)\s*$")

data = dict()
for fn in os.listdir("/data"):
    m = fn_re.match(fn)

    if not m:
        continue

    with open(os.path.join("/data", fn)) as f:
        data[int(m.group(1))] = json.load(f)

data = [data[k] for k in sorted(data.keys())]
data_sum = 0
data_n = 0

out_x = list()
out_y = list()
out_avg = list()

while len(data):
    tmp = data.pop(0)

    if tmp is None:
        val = None
    elif tmp['type'] == 'input' and tmp['val']['type'] == 'int':
        val = int(tmp['val']['val'])
    elif tmp['type'] in ['int', 'float']:
        val = tmp['val']
    else:
        print(tmp)
        continue

    val_desc = str(len(out_x)+1)
    val_weight = 1
        
    if data[0]['type'] == 'str':
        tmp = data.pop(0)
        
        m = val_weight_re.match(tmp['val'])
        if m:
            val_desc = m.group(1)
            val_weight = int(m.group(2))
        else:
            m = val_default_re.match(tmp['val'])
            if m:
                val_desc = m.group(1)
                val = int(m.group(2)) if val is None else val
            else:
                val_desc = tmp['val']

    print("{}:\t{}% {}".format(val_desc, val, "(x{})".format(val_weight) if val_weight > 1 else ""))

    if val is not None:
        data_sum += val * val_weight
        data_n += val_weight

    out_x.append(val_desc)
    out_y.append(val if val else 0)
    out_avg.append(1.0*data_sum/data_n if data_n else 0)

plt.ylim(0,100)
plt.axhspan(0, 40, facecolor='#808080', alpha=0.5)
plt.axhspan(40, 55, facecolor='#a0a0a0', alpha=0.5)
plt.axhspan(55, 70, facecolor='#c0c0c0', alpha=0.5)
plt.axhspan(70, 85, facecolor='#e0e0e0', alpha=0.5)

plt.xticks(np.arange(len(out_x)), out_x, fontsize="xx-small")

for n,x in enumerate(out_y):
    plt.bar(n, x, width=1)

avg = 1.0*data_sum/data_n if data_n else 0

if avg is None:
    mark = None 
elif avg <= 40:
    mark = 5
elif avg <= 55:
    mark = 4
elif avg <= 70:
    mark = 3
elif avg <= 85:
    mark = 2
else:
    mark = 1

plt.plot(out_avg, color='r', label="znÃ¡mka ({})".format(mark))
plt.legend()

print("prumer:\t{}%".format(avg))

plt.savefig("/output/marks.png", dpi=300)
